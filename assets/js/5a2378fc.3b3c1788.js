"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[558],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,h=c["".concat(l,".").concat(d)]||c[d]||u[d]||o;return n?r.createElement(h,s(s({ref:t},m),{},{components:n})):r.createElement(h,s({ref:t},m))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6946:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:2,title:"Schema Design"},s=void 0,i={unversionedId:"schema-design",id:"schema-design",title:"Schema Design",description:"All of the queries specified below can be found in the queries directory.",source:"@site/docs/schema-design.md",sourceDirName:".",slug:"/schema-design",permalink:"/sql-migrator/schema-design",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Schema Design"},sidebar:"docsSidebar",previous:{title:"Home",permalink:"/sql-migrator/"},next:{title:"Migration Infrastructure",permalink:"/sql-migrator/infrastructure"}},l={},p=[{value:"Identification",id:"identification",level:2},{value:"Department Schema",id:"department-schema",level:3},{value:"Employee Schema",id:"employee-schema",level:3},{value:"Contact Info Schema",id:"contact-info-schema",level:3},{value:"Implementation",id:"implementation",level:2}],m={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"All of the queries specified below can be found in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/JaimeStill/sql-migrator/tree/main/queries/"},"queries")," directory.")),(0,a.kt)("p",null,"To help isolate a simple schema to use for proving out the goals of this repository, I built the following query to explore extended properties associated with a ",(0,a.kt)("inlineCode",{parentName:"p"},"[Person].[Person]")," object:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="aw-person-relationships.sql"',title:'"aw-person-relationships.sql"'},"SELECT\n*\nFROM [Person].[Person] as person\nLEFT JOIN [Person].[BusinessEntityContact] [contact]\nON [person].BusinessEntityID = [contact].PersonID\nLEFT JOIN [Person].[EmailAddress] [email]\nON [person].BusinessEntityID = [email].BusinessEntityID\nLEFT JOIN [Person].[Password] [password]\nON [person].BusinessEntityID = [password].BusinessEntityID\nLEFT JOIN [Person].[PersonPhone] [phone]\nON [person].BusinessEntityID = [phone].BusinessEntityID\nLEFT JOIN [HumanResources].[Employee] [employee]\nON [person].BusinessEntityID = [employee].BusinessEntityID\nLEFT JOIN [Sales].[Customer] [customer]\nON [person].BusinessEntityID = [customer].PersonID\nLEFT JOIN [Sales].[PersonCreditCard] [card]\nON [person].BusinessEntityID = [card].BusinessEntityID\n")),(0,a.kt)("p",null,"From this, I determined that I wanted to capture simple personnel data for employees and their contact info. ",(0,a.kt)("inlineCode",{parentName:"p"},"Employee")," would have ",(0,a.kt)("inlineCode",{parentName:"p"},"ContactInfo")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ContactInfo")," would aggregate both the ",(0,a.kt)("inlineCode",{parentName:"p"},"[Person].[EmailAddress]")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"[Person].[PersonPhone]")," tables."),(0,a.kt)("p",null,"I built the following query to explore extended properties associated with a ",(0,a.kt)("inlineCode",{parentName:"p"},"[HumanResources].[Employee]")," object:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="aw-employee-relationships.sql"',title:'"aw-employee-relationships.sql"'},"SELECT\n*\nFROM [HumanResources].[Employee] [employee]\nLEFT JOIN [HumanResources].[EmployeeDepartmentHistory] [deptHistory]\nON [employee].[BusinessEntityID] = [deptHistory].[BusinessEntityID]\nLEFT JOIN [HumanResources].[Department] [department]\nON [deptHistory].[DepartmentID] = [department].[DepartmentID]\nLEFT JOIN [HumanResources].[EmployeePayHistory] [pay]\nON [employee].[BusinessEntityID] = [pay].[BusinessEntityID]\nLEFT JOIN [HumanResources].[JobCandidate] [candidate]\nON [employee].[BusinessEntityID] = [candidate].[BusinessEntityID]\nLEFT JOIN [Person].[Person] [person]\nON [employee].[BusinessEntityID] = [person].[BusinessEntityID]\nLEFT JOIN [Sales].[SalesPerson] [sales]\nON [employee].[BusinessEntityID] = [sales].[BusinessEntityID]\nLEFT JOIN [Purchasing].[PurchaseOrderHeader] [po]\nON [employee].[BusinessEntityID] = [po].[EmployeeID]\nORDER BY [employee].[LoginID]\n")),(0,a.kt)("p",null,"From this, I determined that I wanted to capture the current ",(0,a.kt)("inlineCode",{parentName:"p"},"[HumanResources].[Department]")," the ",(0,a.kt)("inlineCode",{parentName:"p"},"Employee")," currently belongs to as well."),(0,a.kt)("h2",{id:"identification"},"Identification"),(0,a.kt)("p",null,"In order to isolate the final properties for my schema models, I built queries that translated the AdventureWorks data into the format that I wanted. In addition to these properties, I also specified ",(0,a.kt)("inlineCode",{parentName:"p"},"Source*")," properties that would be used to facilitate data migration from AdventureWorks into my own database."),(0,a.kt)("h3",{id:"department-schema"},"Department Schema"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="department-schema.sql"',title:'"department-schema.sql"'},"SELECT DISTINCT\n    CAST([department].[DepartmentID] as nvarchar(MAX)) [SourceId],\n    [department].[Name] [Name],\n    [department].[GroupName] [GroupName]\nFROM [HumanResources].[Department] [department]\nORDER BY [department].[Name]\n")),(0,a.kt)("h3",{id:"employee-schema"},"Employee Schema"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="employee-schema.sql"',title:'"employee-schema.sql"'},"SELECT\n    CAST([person].[BusinessEntityID] as nvarchar(MAX)) [SourceId],\n    CAST([history].[DepartmentID] as nvarchar(MAX)) [SourceDepartmentId],\n    [employee].[NationalIdNumber] [NationalId],\n    [person].[LastName] [LastName],\n    [person].[FirstName] [FirstName],\n    [person].[MiddleName] [MiddleName],\n    [employee].[LoginId] [Login],\n    [employee].[JobTitle] [JobTitle]\nFROM [Person].[Person] [person]\nLEFT JOIN [HumanResources].[Employee] [employee]\nON [person].[BusinessEntityID] = [employee].[BusinessEntityID]\nLEFT JOIN [HumanResources].[EmployeeDepartmentHistory] [history]\nON [employee].[BusinessEntityID] = [history].[BusinessEntityID]\nWHERE [person].[PersonType] = 'EM'\nAND [history].[EndDate] IS NULL\nORDER BY [person].[LastName]\n")),(0,a.kt)("p",null,"In the above query, I wanted to filter the results so that I only get:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"People who are Employees: ",(0,a.kt)("inlineCode",{parentName:"li"},"WHERE [person].[PersonType] = 'EM'")),(0,a.kt)("li",{parentName:"ul"},"EmployeeDepartmentHistory only for the ",(0,a.kt)("strong",{parentName:"li"},"current")," Department: ",(0,a.kt)("inlineCode",{parentName:"li"},"AND [history].[EndDate] IS NULL"))),(0,a.kt)("h3",{id:"contact-info-schema"},"Contact Info Schema"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="contact-info-schema.sql"',title:'"contact-info-schema.sql"'},"(\n    SELECT\n        CAST([person].[BusinessEntityID] as nvarchar(MAX)) [SourceEmployeeId],\n        CAST([phone].[PhoneNumber] as nvarchar(MAX)) [Value],\n        CAST([phoneType].[Name] as nvarchar(MAX)) [ContactType]\n    FROM [Person].[Person] [person]\n    LEFT JOIN [Person].[PersonPhone] [phone]\n    ON [person].[BusinessEntityID] = [phone].[BusinessEntityID]\n    LEFT JOIN [Person].[PhoneNumberType] [phoneType]\n    ON [phone].[PhoneNumberTypeID] = [phoneType].[PhoneNumberTypeID]\n)\nUNION\n(\n    SELECT\n        CAST([person].[BusinessEntityID] as nvarchar(MAX)) [SourceEmployeeId],\n        CAST([email].[EmailAddress] as nvarchar(MAX)) [Value],\n        CAST('Email' as nvarchar(MAX)) [ContactType]\n    FROM [Person].[Person] [person]\n    LEFT JOIN [Person].[EmailAddress] [email]\n    ON [person].[BusinessEntityID] = [email].[BusinessEntityID]\n)\nORDER BY [Value]\n")),(0,a.kt)("p",null,"The above query merges the data from ",(0,a.kt)("inlineCode",{parentName:"p"},"[Person.PersonPhone]"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"[Person].[PhoneNumberType]"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"[Person].[EmailAddress]")," into a common schema that can be used for ",(0,a.kt)("inlineCode",{parentName:"p"},"ContactInfo"),"."),(0,a.kt)("h2",{id:"implementation"},"Implementation"),(0,a.kt)("p",null,"To prepare the project for building out the data migration infrastructure, I initialized the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/JaimeStill/sql-migrator/tree/main/src/App"},(0,a.kt)("strong",{parentName:"a"},"App"))," project with ",(0,a.kt)("inlineCode",{parentName:"p"},"dotnet new webapi"),". It serves as an API for the app schema and contains the Entity Framework configuration. It has the following structure:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/JaimeStill/sql-migrator/tree/main/src/App/Schema"},"Schema")," - class definitions for entity models."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/JaimeStill/sql-migrator/tree/main/src/App/Data"},"Data")," - contains the ",(0,a.kt)("inlineCode",{parentName:"li"},"AppDbContext")," Entity Framework ",(0,a.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/ef/core/dbcontext-configuration/"},(0,a.kt)("inlineCode",{parentName:"a"},"DbContext")),".",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/JaimeStill/sql-migrator/tree/main/src/App/Data/Config"},"Config")," - contains ",(0,a.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/ef/core/modeling/#grouping-configuration"},(0,a.kt)("inlineCode",{parentName:"a"},"IEntityTypeConfiguration"))," entity configurations."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/JaimeStill/sql-migrator/tree/main/src/App/Migrations"},"Migrations")," - contains the Entity Framework migrations."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/JaimeStill/sql-migrator/tree/main/src/App/Services"},"Services")," - contains classes that define entity service logic and a class for registering the services with the ",(0,a.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection"},"ASP.NET Core Dependency Injection")," service container."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/JaimeStill/sql-migrator/tree/main/src/App/Controllers"},"Controllers")," - contains API controllers that expose entity logic.")))}u.isMDXComponent=!0}}]);